{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/firestore\";\nimport * as i4 from \"../global\";\nexport let FirebaseService = /*#__PURE__*/(() => {\n  class FirebaseService {\n    constructor(firebaseAuth, router, firestore, afs, globals) {\n      /*this.firebaseAuth.onAuthStateChanged((user) => {\r\n        if (user) {\r\n          globals.isLoggedIn = true;\r\n        } else {\r\n          globals.isLoggedIn = false;\r\n        }\r\n      });*/\n      this.firebaseAuth = firebaseAuth;\n      this.router = router;\n      this.firestore = firestore;\n      this.afs = afs;\n      this.globals = globals;\n      this.firebaseAuth.authState.subscribe(user => {\n        if (user) {\n          this.userData = user;\n          localStorage.setItem('user', JSON.stringify(this.userData));\n          JSON.parse(localStorage.getItem('user'));\n        } else {\n          localStorage.setItem('user', null);\n          JSON.parse(localStorage.getItem('user'));\n        }\n      });\n    }\n    getAuth() {\n      return this.firebaseAuth.authState;\n    }\n    signin(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.firebaseAuth.signInWithEmailAndPassword(email, password).then(res => {\n          this.globals.isLoggedIn = true;\n          localStorage.setItem('user', JSON.stringify(res.user));\n          this.router.navigate(['home']);\n          this.SetUserData(res.user);\n        });\n      });\n    }\n    /*async signup(email: string, password: string){\r\n      return this.firebaseAuth.createUserWithEmailAndPassword(email, password)\r\n        .then (res => {\r\n          this.isLoggedIn = true;\r\n          localStorage.setItem('user', JSON.stringify(res.user));\r\n          this.router.navigate(['home']);\r\n        });\r\n    }*/\n    signup(email, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          const newUserCredential = yield this.firebaseAuth.createUserWithEmailAndPassword(email, password);\n          yield this.firestore.doc(`userProfile/${newUserCredential.user.uid}`).set({\n            email\n          });\n          /*\r\n            Here we add the functionality to send the email.\r\n          */\n          yield newUserCredential.user.sendEmailVerification();\n          this.SetUserData(newUserCredential);\n          return newUserCredential;\n        } catch (error) {\n          throw alert('Es ist ein Fehler aufgetreten.');\n        }\n      });\n    }\n    logout() {\n      return this.firebaseAuth.signOut().then(() => {\n        this.router.navigate(['anmelden']);\n        localStorage.removeItem('user');\n      });\n    }\n    resetPasswordInit(email) {\n      return this.firebaseAuth.sendPasswordResetEmail(email, {\n        url: 'http://localhost:4200/auth/userMgmt'\n      });\n    }\n    SetUserData(user) {\n      const userRef = this.afs.doc(`userProfil/${user.uid}`);\n      const userData = {\n        uid: user.uid,\n        email: user.email,\n        name: user.name\n      };\n      return userRef.set(userData, {\n        merge: true\n      });\n    }\n    getUserData() {\n      return this.userData;\n    }\n  }\n  FirebaseService.ɵfac = function FirebaseService_Factory(t) {\n    return new (t || FirebaseService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AngularFirestore), i0.ɵɵinject(i3.AngularFirestore), i0.ɵɵinject(i4.Globals));\n  };\n  FirebaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseService,\n    factory: FirebaseService.ɵfac,\n    providedIn: 'root'\n  });\n  return FirebaseService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}